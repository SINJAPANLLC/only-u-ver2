        blobStream.end(file.buffer);
EOF

削除されました"StorageClient\|replitClient" server/routes.ts || echo "✅ すべて 
1402 server/routes.ts
✅ Python置換完了
=== 確認: objectStorageClient と replitClient が残っていないか ===
1327:      // Removed replitClient(filePath);
root@srv1087935:/var/www/only-u# ^C
root@srv1087935:/var/www/only-u# cd /var/www/only-u

# 1. server/routes.tsで問題のある箇所を確認
echo "=== server/routes.ts の問題箇所を確認 ==="
grep -n -A 5 "objectStorageClient\|replitClient" server/routes.ts

# 2. server/storage-adapter.tsを確認
echo "=== server/storage-adapter.ts の先頭50行 ==="
head -n 50 server/storage-adapter.ts

# 3. .env.productionにSESSION_SECRETがあるか確認
echo "=== SESSION_SECRET の確認 ==="
grep SESSION_SECRET .env.production || echo "❌ SESSION_SECRET が見つかりません"=== server/routes.ts の問題箇所を確認 ===
1327:      // Removed replitClient(filePath);
1328-      
1329-      if (!result.ok || !result.value || !result.value[0] || result.value[0].length === 0) {
1330-        return res.status(404).json({ error: 'File not found' });
1331-      }
1332-      
=== server/storage-adapter.ts の先頭50行 ===
/**
 * ストレージアダプター - Replit Object Storage、Cloudflare R2、AWS S3、GCSに対応
 * Hostingerデプロイ時は環境変数でストレージプロバイダーを切り替え可能
 */

import { Client as ReplitClient } from '@replit/object-storage';

// ストレージプロバイダーのタイプ
type StorageProvider = 'replit' | 'r2' | 's3' | 'gcs';

// 環境変数からストレージプロバイダーを判定
const getStorageProvider = (): StorageProvider => {
  if (process.env.R2_ACCOUNT_ID && process.env.R2_ACCESS_KEY_ID) {
    return 'r2';
  }
  if (process.env.AWS_ACCESS_KEY_ID && process.env.AWS_SECRET_ACCESS_KEY) {
    return 's3';
  }
  if (process.env.GCS_PROJECT_ID && process.env.GCS_BUCKET_NAME) {
    return 'gcs';
  }
  // デフォルトはReplit Object Storage
  return 'replit';
};

// ストレージアダプターインターフェース
export interface StorageAdapter {
  upload(key: string, data: Buffer, contentType?: string): Promise<string>;
  download(key: string): Promise<Buffer>;
  delete(key: string): Promise<void>;
  getPublicUrl(key: string): string;
}

// Replit Object Storage アダプター
class ReplitStorageAdapter implements StorageAdapter {
  private client: ReplitClient;

  constructor() {
    this.client = new ReplitClient();
  }

  async upload(key: string, data: Buffer, contentType?: string): Promise<string> {
    const publicKey = `public/${key}`;
    await this.client.uploadFromBytes(publicKey, data);
    return this.getPublicUrl(key);
  }

  async download(key: string): Promise<Buffer> {
    const publicKey = `public/${key}`;
    const result = await this.client.downloadAsBytes(publicKey);
=== SESSION_SECRET の確認 ===
SESSION_SECRET=vK8mN3xP9qR2wE5tY7uI0oP3aS6dF8gH1jK4lZ7xC9vB2nM5qW8eR1tY4uI6oP9a
root@srv1087935:/var/www/only-u# 